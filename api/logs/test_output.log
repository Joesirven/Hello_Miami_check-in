============================= test session starts ==============================
platform darwin -- Python 3.10.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /Users/joseluissirven/Projects/Hello_Miami/app
configfile: pytest.ini
plugins: anyio-4.4.0
collected 53 items

tests/models/test_models.py EEEEE                                        [  9%]
tests/queries/test_blast_queries.py EEEEE                                [ 18%]
tests/queries/test_contacts_queries.py EEEEE                             [ 28%]
tests/queries/test_interactions_queries.py EE                            [ 32%]
tests/queries/test_messages_queries.py EEEEE                             [ 41%]
tests/routers/test_blast_routers.py FFFFFFFF                             [ 56%]
tests/routers/test_contacts_router.py FFFFF                              [ 66%]
tests/routers/test_interactions_routers.py EE                            [ 69%]
tests/routers/test_messages_router.py FFFFFFF                            [ 83%]
tests/schemas/test_schems.py .....F...                                   [100%]

==================================== ERRORS ====================================
_____________________ ERROR at setup of test_contact_model _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107300160>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107303dc0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107303190>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107300160>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107303dc0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107303190>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
___________________ ERROR at setup of test_interaction_model ___________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107c2b790>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107c2b820>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107c2b550>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107c2b790>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107c2b820>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107c2b550>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_____________________ ERROR at setup of test_message_model _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107a3ea70>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107a3eb00>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107a3e560>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107a3ea70>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107a3eb00>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107a3e560>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
______________________ ERROR at setup of test_blast_model ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107473ca0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107473cd0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x1074733d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107473ca0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107473cd0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x1074733d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_________________ ERROR at setup of test_blast_recipient_model _________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x10786b730>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x10786b790>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x10786b4c0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x10786b730>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x10786b790>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x10786b4c0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
______________________ ERROR at setup of test_send_blast _______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107b30eb0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107b30f40>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107b30730>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107b30eb0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107b30f40>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107b30730>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
______________________ ERROR at setup of test_get_blasts _______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f5cb80>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f5cb50>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f5cd00>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f5cb80>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f5cb50>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f5cd00>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_______________________ ERROR at setup of test_get_blast _______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f06110>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f06170>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f05840>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f06110>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f06170>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f05840>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_____________________ ERROR at setup of test_update_blast ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107303af0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107302e30>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107a45e70>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107303af0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107302e30>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107a45e70>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_____________________ ERROR at setup of test_delete_blast ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f1bfd0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f192a0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f18310>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f1bfd0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f192a0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f18310>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
____________________ ERROR at setup of test_create_contact _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x1075999c0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107599780>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107599600>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x1075999c0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107599780>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107599600>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_____________________ ERROR at setup of test_get_contacts ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107c7ca30>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107c7c2e0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107c7e260>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107c7ca30>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107c7c2e0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107c7e260>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
______________________ ERROR at setup of test_get_contact ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107bad2d0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107bad9c0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107baf8b0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107bad2d0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107bad9c0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107baf8b0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
____________________ ERROR at setup of test_update_contact _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107d262f0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107d264a0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107d261d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107d262f0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107d264a0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107d261d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
____________________ ERROR at setup of test_delete_contact _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107b38820>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107b3a4a0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107b3b040>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107b38820>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107b3a4a0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107b3b040>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
__________________ ERROR at setup of test_create_interaction ___________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x10789b070>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x10789b640>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107899c60>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x10789b070>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x10789b640>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107899c60>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
______________ ERROR at setup of test_get_interactions_by_contact ______________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107578be0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107578ca0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107579570>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107578be0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107578ca0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107579570>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
____________________ ERROR at setup of test_create_message _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107a67d90>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107a643d0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107a66290>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107a67d90>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107a643d0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107a66290>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_____________________ ERROR at setup of test_get_messages ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107b3ae90>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107b39c90>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107b39030>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107b3ae90>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107b39c90>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107b39030>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
______________________ ERROR at setup of test_get_message ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f954b0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f947c0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f943d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107f954b0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107f947c0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107f943d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
____________________ ERROR at setup of test_update_message _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107cc7ca0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107cc4ee0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107cc6e60>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107cc7ca0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107cc4ee0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107cc6e60>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
____________________ ERROR at setup of test_delete_message _____________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x1078ae6b0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x1078ac280>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x1078ac550>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x1078ae6b0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x1078ac280>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x1078ac550>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
_____________________ ERROR at setup of test_send_message ______________________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107c8a860>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107c8acb0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107c8b1c0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x107c8a860>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x107c8acb0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x107c8b1c0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
___________ ERROR at setup of test_send_message_non_existent_contact ___________

self = ARRAY(String())
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def _compiler_dispatch(
        self: Visitable, visitor: Any, **kw: Any
    ) -> str:
        """Look for an attribute named "visit_<visit_name>" on the
        visitor, and call it with the same kw params.
    
        """
        try:
>           meth = getter(visitor)
E           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'. Did you mean: 'visit_REAL'?

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:137: AttributeError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x1103aea40>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x1103aceb0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x1103ad5d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
>               processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6647: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6678: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/dialects/sqlite/base.py:1541: in get_column_specification
    coltype = self.dialect.type_compiler_instance.process(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:960: in process
    return type_._compiler_dispatch(self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:139: in _compiler_dispatch
    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0>
element = ARRAY(String())
err = AttributeError("'SQLiteTypeCompiler' object has no attribute 'visit_ARRAY'")
kw = {'type_expression': Column('media_urls', ARRAY(String()), table=<blasts>)}

    def visit_unsupported_compilation(
        self, element: Any, err: Exception, **kw: Any
    ) -> NoReturn:
>       raise exc.UnsupportedCompilationError(self, element) from err
E       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY (Background on this error at: https://sqlalche.me/e/20/l7de)

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:965: UnsupportedCompilationError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def db():
>       Base.metadata.create_all(bind=engine)

tests/conftest.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5868: in create_all
    bind._run_ddl_visitor(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3253: in _run_ddl_visitor
    conn._run_ddl_visitor(visitorcallable, element, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2459: in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:918: in visit_metadata
    self.traverse_single(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:664: in traverse_single
    return meth(obj, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:956: in visit_table
    )._invoke_with(self.connection)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:314: in _invoke_with
    return bind.execute(self)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:180: in _execute_on_connection
    return connection._execute_ddl(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/engine/base.py:1526: in _execute_ddl
    compiled = ddl.compile(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/elements.py:308: in compile
    return self._compiler(dialect, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/ddl.py:69: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:870: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:915: in process
    return obj._compiler_dispatch(self, **kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/visitors.py:141: in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x1103aea40>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x1103aceb0>, kw = {}
table = Table('blasts', MetaData(), Column('blast_id', Integer(), table=<blasts>, primary_key=True, nullable=False), Column('n...rElementColumnDefault(<Status.PENDING: 'pending'>)), Column('scheduled_time', DateTime(), table=<blasts>), schema=None)
preparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x106ad6950>
text = '\nCREATE TABLE blasts (\n\tblast_id INTEGER NOT NULL, \n\tname VARCHAR, \n\ttype VARCHAR(5), \n\tcontent TEXT, \n\thtml_content TEXT, \n\tsubject VARCHAR'
create_table_suffix = '', separator = ', \n', first_pk = True
create_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x1103ad5d0>

    def visit_create_table(self, create, **kw):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
    
        text += "TABLE "
        if create.if_not_exists:
            text += "IF NOT EXISTS "
    
        text += preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
                    create_column, first_pk=column.primary_key and not first_pk
                )
                if processed is not None:
                    text += separator
                    separator = ", \n"
                    text += "\t" + processed
                if column.primary_key:
                    first_pk = True
            except exc.CompileError as ce:
>               raise exc.CompileError(
                    "(in table '%s', column '%s'): %s"
                    % (table.description, column.name, ce.args[0])
                ) from ce
E               sqlalchemy.exc.CompileError: (in table 'blasts', column 'media_urls'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x106ad69b0> can't render element of type ARRAY

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/compiler.py:6657: CompileError
=================================== FAILURES ===================================
______________________________ test_create_blast _______________________________

    def test_create_blast():
        response = client.post("/blasts/", json={
            "name": "Test Blast",
            "type": "SMS",
            "content": "Test content",
            "recipient_ids": [1, 2, 3]
        })
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/routers/test_blast_routers.py:16: AssertionError
_______________________________ test_read_blast ________________________________

    def test_read_blast():
        # First, create a blast
        create_response = client.post("/blasts/", json={
            "name": "Test Blast",
            "type": "SMS",
            "content": "Test content",
            "recipient_ids": [1, 2, 3]
        })
>       blast_id = create_response.json()["blast_id"]
E       KeyError: 'blast_id'

tests/routers/test_blast_routers.py:30: KeyError
_________________________ test_read_non_existent_blast _________________________

    def test_read_non_existent_blast():
>       response = client.get("/blasts/9999")

tests/routers/test_blast_routers.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:518: in get
    return super().get(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1066: in get
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:458: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:2177: in run_sync_in_worker_thread
    return await future
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:859: in run
    result = context.run(func, *args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

blast_id = 9999
db = <sqlalchemy.orm.session.AsyncSession object at 0x107c8b700>

    @router.get("/{blast_id}", response_model=schemas.Blast)
    def read_blast(
        blast_id: int,
        db: Session = Depends(db.get_db)
    ):
>       db_blast = queries.get_blast(db, blast_id)
E       AttributeError: module 'api.queries' has no attribute 'get_blast'

routers/blasts.py:23: AttributeError
_______________________________ test_read_blasts _______________________________

    def test_read_blasts():
        # Create multiple blasts
        for i in range(3):
            client.post("/blasts/", json={
                "name": f"Test Blast {i}",
                "type": "SMS",
                "content": f"Test content {i}",
                "recipient_ids": [1, 2, 3]
            })
    
>       response = client.get("/blasts/")

tests/routers/test_blast_routers.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:518: in get
    return super().get(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1066: in get
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:458: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:2177: in run_sync_in_worker_thread
    return await future
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:859: in run
    result = context.run(func, *args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db = <sqlalchemy.orm.session.AsyncSession object at 0x107c8b700>

    @router.get("/", response_model=list[schemas.Blast])
    def read_blasts(
        db: Session = Depends(db.get_db)
    ):
>       db_blast = queries.get_blasts(db)
E       AttributeError: module 'api.queries' has no attribute 'get_blasts'

routers/blasts.py:33: AttributeError
______________________________ test_update_blast _______________________________

    def test_update_blast():
        # First, create a blast
        create_response = client.post("/blasts/", json={
            "name": "Test Blast",
            "type": "SMS",
            "content": "Test content",
            "recipient_ids": [1, 2, 3]
        })
>       blast_id = create_response.json()["blast_id"]
E       KeyError: 'blast_id'

tests/routers/test_blast_routers.py:69: KeyError
________________________ test_update_non_existent_blast ________________________

    def test_update_non_existent_blast():
        response = client.put("/blasts/9999", json={
            "name": "Updated Blast",
            "type": "SMS",
            "content": "Updated content",
            "recipient_ids": [1, 2, 3]
        })
>       assert response.status_code == 404
E       assert 422 == 404
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/routers/test_blast_routers.py:91: AssertionError
_______________________________ test_send_blast ________________________________

    def test_send_blast():
        # First, create a blast
        create_response = client.post("/blasts/", json={
            "name": "Test Blast",
            "type": "SMS",
            "content": "Test content",
            "recipient_ids": [1, 2, 3]
        })
>       blast_id = create_response.json()["blast_id"]
E       KeyError: 'blast_id'

tests/routers/test_blast_routers.py:103: KeyError
_________________________ test_send_non_existent_blast _________________________

    def test_send_non_existent_blast():
>       response = client.post("/blasts/9999/send")

tests/routers/test_blast_routers.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:597: in post
    return super().post(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1157: in post
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:458: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:2177: in run_sync_in_worker_thread
    return await future
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:859: in run
    result = context.run(func, *args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

blast_id = 9999
db = <sqlalchemy.orm.session.AsyncSession object at 0x107c8b700>

    @router.post("/{blast_id}/send", response_model=schemas.Blast)
    def send_blast(
        blast_id: int,
        db: Session = Depends(db.get_db)
    ):
>       db_blast = queries.send_blast(db, blast_id)
E       AttributeError: module 'api.queries' has no attribute 'send_blast'

routers/blasts.py:56: AttributeError
_____________________________ test_create_contact ______________________________

self = <sqlalchemy.orm.relationships.JoinCondition object at 0x1073401f0>

    def _determine_joins(self) -> None:
        """Determine the 'primaryjoin' and 'secondaryjoin' attributes,
        if not passed to the constructor already.
    
        This is based on analysis of the foreign key relationships
        between the parent and target mapped selectables.
    
        """
        if self.secondaryjoin is not None and self.secondary is None:
            raise sa_exc.ArgumentError(
                "Property %s specified with secondary "
                "join condition but "
                "no secondary argument" % self.prop
            )
    
        # find a join between the given mapper's mapped table and
        # the given table. will try the mapper's local table first
        # for more specificity, then if not found will try the more
        # general mapped table, which in the case of inheritance is
        # a join.
        try:
            consider_as_foreign_keys = self.consider_as_foreign_keys or None
            if self.secondary is not None:
                if self.secondaryjoin is None:
                    self.secondaryjoin = join_condition(
                        self.child_persist_selectable,
                        self.secondary,
                        a_subset=self.child_local_selectable,
                        consider_as_foreign_keys=consider_as_foreign_keys,
                    )
                if self.primaryjoin_initial is None:
                    self.primaryjoin = join_condition(
                        self.parent_persist_selectable,
                        self.secondary,
                        a_subset=self.parent_local_selectable,
                        consider_as_foreign_keys=consider_as_foreign_keys,
                    )
                else:
                    self.primaryjoin = self.primaryjoin_initial
            else:
                if self.primaryjoin_initial is None:
>                   self.primaryjoin = join_condition(
                        self.parent_persist_selectable,
                        self.child_persist_selectable,
                        a_subset=self.parent_local_selectable,
                        consider_as_foreign_keys=consider_as_foreign_keys,
                    )

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/relationships.py:2423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/util.py:123: in join_condition
    return Join._join_condition(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.sql.selectable.Join'>
a = Table('interactions', MetaData(), Column('interaction_id', Integer(), table=<interactions>, primary_key=True, nullable...ementColumnDefault(<Status.PENDING: 'pending'>)), Column('error_message', String(), table=<interactions>), schema=None)
b = Table('blast_recipients', MetaData(), Column('blast_id', Integer(), ForeignKey('blasts.blast_id'), table=<blast_recipi...Integer(), ForeignKey('contacts.contact_id'), table=<blast_recipients>, primary_key=True, nullable=False), schema=None)

    @classmethod
    def _join_condition(
        cls,
        a: FromClause,
        b: FromClause,
        *,
        a_subset: Optional[FromClause] = None,
        consider_as_foreign_keys: Optional[
            AbstractSet[ColumnClause[Any]]
        ] = None,
    ) -> ColumnElement[bool]:
        """Create a join condition between two tables or selectables.
    
        See sqlalchemy.sql.util.join_condition() for full docs.
    
        """
        constraints = cls._joincond_scan_left_right(
            a, a_subset, b, consider_as_foreign_keys
        )
    
        if len(constraints) > 1:
            cls._joincond_trim_constraints(
                a, b, constraints, consider_as_foreign_keys
            )
    
        if len(constraints) == 0:
            if isinstance(b, FromGrouping):
                hint = (
                    " Perhaps you meant to convert the right side to a "
                    "subquery using alias()?"
                )
            else:
                hint = ""
>           raise exc.NoForeignKeysError(
                "Can't find any foreign key relationships "
                "between '%s' and '%s'.%s"
                % (a.description, b.description, hint)
            )
E           sqlalchemy.exc.NoForeignKeysError: Can't find any foreign key relationships between 'interactions' and 'blast_recipients'.

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/sql/selectable.py:1380: NoForeignKeysError

The above exception was the direct cause of the following exception:

    def test_create_contact():
>       response = client.post("/contacts/", json={
            "name": "John Doe",
            "phone_number": "+1234567890",
            "email": "john@example.com"
        })

tests/routers/test_contacts_router.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:597: in post
    return super().post(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1157: in post
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:451: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:212: in run_endpoint_function
    return await dependant.call(**values)
routers/contacts.py:16: in create_contact
    db_contact = models.Contact(**contact.model_dump())
<string>:4: in __init__
    ???
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4396: in _event_on_init
    instrumenting_mapper._check_configure()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:2388: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4204: in _configure_registries
    _do_configure_registries(registries, cascade)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4245: in _do_configure_registries
    mapper._post_configure_properties()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:2405: in _post_configure_properties
    prop.init()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/interfaces.py:584: in init
    self.do_init()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/relationships.py:1644: in do_init
    self._setup_join_conditions()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/relationships.py:1884: in _setup_join_conditions
    self._join_condition = jc = JoinCondition(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/relationships.py:2310: in __init__
    self._determine_joins()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.orm.relationships.JoinCondition object at 0x1073401f0>

    def _determine_joins(self) -> None:
        """Determine the 'primaryjoin' and 'secondaryjoin' attributes,
        if not passed to the constructor already.
    
        This is based on analysis of the foreign key relationships
        between the parent and target mapped selectables.
    
        """
        if self.secondaryjoin is not None and self.secondary is None:
            raise sa_exc.ArgumentError(
                "Property %s specified with secondary "
                "join condition but "
                "no secondary argument" % self.prop
            )
    
        # find a join between the given mapper's mapped table and
        # the given table. will try the mapper's local table first
        # for more specificity, then if not found will try the more
        # general mapped table, which in the case of inheritance is
        # a join.
        try:
            consider_as_foreign_keys = self.consider_as_foreign_keys or None
            if self.secondary is not None:
                if self.secondaryjoin is None:
                    self.secondaryjoin = join_condition(
                        self.child_persist_selectable,
                        self.secondary,
                        a_subset=self.child_local_selectable,
                        consider_as_foreign_keys=consider_as_foreign_keys,
                    )
                if self.primaryjoin_initial is None:
                    self.primaryjoin = join_condition(
                        self.parent_persist_selectable,
                        self.secondary,
                        a_subset=self.parent_local_selectable,
                        consider_as_foreign_keys=consider_as_foreign_keys,
                    )
                else:
                    self.primaryjoin = self.primaryjoin_initial
            else:
                if self.primaryjoin_initial is None:
                    self.primaryjoin = join_condition(
                        self.parent_persist_selectable,
                        self.child_persist_selectable,
                        a_subset=self.parent_local_selectable,
                        consider_as_foreign_keys=consider_as_foreign_keys,
                    )
                else:
                    self.primaryjoin = self.primaryjoin_initial
        except sa_exc.NoForeignKeysError as nfe:
            if self.secondary is not None:
                raise sa_exc.NoForeignKeysError(
                    "Could not determine join "
                    "condition between parent/child tables on "
                    "relationship %s - there are no foreign keys "
                    "linking these tables via secondary table '%s'.  "
                    "Ensure that referencing columns are associated "
                    "with a ForeignKey or ForeignKeyConstraint, or "
                    "specify 'primaryjoin' and 'secondaryjoin' "
                    "expressions." % (self.prop, self.secondary)
                ) from nfe
            else:
>               raise sa_exc.NoForeignKeysError(
                    "Could not determine join "
                    "condition between parent/child tables on "
                    "relationship %s - there are no foreign keys "
                    "linking these tables.  "
                    "Ensure that referencing columns are associated "
                    "with a ForeignKey or ForeignKeyConstraint, or "
                    "specify a 'primaryjoin' expression." % self.prop
                ) from nfe
E               sqlalchemy.exc.NoForeignKeysError: Could not determine join condition between parent/child tables on relationship Interaction.blast_recipients - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/relationships.py:2444: NoForeignKeysError
______________________________ test_read_contacts ______________________________

    def test_read_contacts():
>       response = client.get("/contacts/")

tests/routers/test_contacts_router.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:518: in get
    return super().get(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1066: in get
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:451: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:212: in run_endpoint_function
    return await dependant.call(**values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

skip = 0, limit = 100
db = <sqlalchemy.orm.session.AsyncSession object at 0x107c8b700>

    @router.get("/", response_model=list[schemas.Contact])
    async def read_contacts(
        skip: int = 0,
        limit: int = 100,
        db: Session = Depends(db.get_db)
            ):
>       contacts = await db.query(
            models.Contact
            ).offset(skip).limit(limit).all()
E       AttributeError: 'AsyncSession' object has no attribute 'query'

routers/contacts.py:29: AttributeError
______________________________ test_read_contact _______________________________

    def test_read_contact():
        # First, create a contact
>       create_response = client.post("/contacts/", json={
            "name": "Jane Doe",
            "phone_number": "+0987654321",
            "email": "jane@example.com"
        })

tests/routers/test_contacts_router.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:597: in post
    return super().post(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1157: in post
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:451: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:212: in run_endpoint_function
    return await dependant.call(**values)
routers/contacts.py:16: in create_contact
    db_contact = models.Contact(**contact.model_dump())
<string>:4: in __init__
    ???
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4396: in _event_on_init
    instrumenting_mapper._check_configure()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:2388: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4204: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Interaction(interactions)]'. Original exception was: Could not determine join condition between parent/child tables on relationship Interaction.blast_recipients - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4241: InvalidRequestError
_____________________________ test_update_contact ______________________________

    def test_update_contact():
        # First, create a contact
>       create_response = client.post("/contacts/", json={
            "name": "Bob Smith",
            "phone_number": "+1122334455",
            "email": "bob@example.com"
        })

tests/routers/test_contacts_router.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:597: in post
    return super().post(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1157: in post
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:451: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:212: in run_endpoint_function
    return await dependant.call(**values)
routers/contacts.py:16: in create_contact
    db_contact = models.Contact(**contact.model_dump())
<string>:4: in __init__
    ???
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4396: in _event_on_init
    instrumenting_mapper._check_configure()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:2388: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4204: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Interaction(interactions)]'. Original exception was: Could not determine join condition between parent/child tables on relationship Interaction.blast_recipients - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4241: InvalidRequestError
_____________________________ test_delete_contact ______________________________

    def test_delete_contact():
        # First, create a contact
>       create_response = client.post("/contacts/", json={
            "name": "Alice Johnson",
            "phone_number": "+9988776655",
            "email": "alice@example.com"
        })

tests/routers/test_contacts_router.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:597: in post
    return super().post(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1157: in post
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:451: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:212: in run_endpoint_function
    return await dependant.call(**values)
routers/contacts.py:16: in create_contact
    db_contact = models.Contact(**contact.model_dump())
<string>:4: in __init__
    ???
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/event/attr.py:497: in __call__
    fn(*args, **kw)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4396: in _event_on_init
    instrumenting_mapper._check_configure()
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:2388: in _check_configure
    _configure_registries({self.registry}, cascade=True)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4204: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Interaction(interactions)]'. Original exception was: Could not determine join condition between parent/child tables on relationship Interaction.blast_recipients - there are no foreign keys linking these tables.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or specify a 'primaryjoin' expression.

../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/sqlalchemy/orm/mapper.py:4241: InvalidRequestError
_____________________________ test_create_message ______________________________

    def test_create_message():
        response = client.post("/messages/", json={
            "contact_id": 1,
            "type": "SMS",
            "content": "Test message",
            "direction": "OUTBOUND"
        })
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/routers/test_messages_router.py:15: AssertionError
______________________________ test_read_messages ______________________________

    def test_read_messages():
>       response = client.get("/messages/")

tests/routers/test_messages_router.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:518: in get
    return super().get(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1066: in get
    return self.request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:488: in request
    return super().request(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:837: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:926: in send
    response = self._send_handling_auth(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:954: in _send_handling_auth
    response = self._send_handling_redirects(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:991: in _send_handling_redirects
    response = self._send_single_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/httpx/_client.py:1027: in _send_single_request
    response = transport.handle_request(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:381: in handle_request
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/testclient.py:378: in handle_request
    portal.call(self.app, scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:458: in result
    return self.__get_result()
../../../../.pyenv/versions/3.10.9/lib/python3.10/concurrent/futures/_base.py:403: in __get_result
    raise self._exception
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:62: in wrapped_app
    raise exc
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/_exception_handler.py:51: in wrapped_app
    await app(scope, receive, sender)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/routing.py:73: in app
    response = await f(request)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/fastapi/routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:2177: in run_sync_in_worker_thread
    return await future
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/anyio/_backends/_asyncio.py:859: in run
    result = context.run(func, *args)
routers/messages.py:26: in read_messages
    return messages.get_messages(db, skip=skip, limit=limit)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db = <sqlalchemy.orm.session.AsyncSession object at 0x107c8b700>, skip = 0
limit = 100

    def get_messages(
            db: Session,
            skip: int = 0,
            limit: int = 100
            ):
>       return db.query(models.Message).offset(skip).limit(limit).all()
E       AttributeError: 'AsyncSession' object has no attribute 'query'

queries/messages.py:49: AttributeError
______________________________ test_read_message _______________________________

    def test_read_message():
        # First, create a message
        create_response = client.post("/messages/", json={
            "contact_id": 1,
            "type": "SMS",
            "content": "Test message",
            "direction": "OUTBOUND"
        })
>       message_id = create_response.json()["message_id"]
E       KeyError: 'message_id'

tests/routers/test_messages_router.py:34: KeyError
_____________________________ test_update_message ______________________________

    def test_update_message():
        # First, create a message
        create_response = client.post("/messages/", json={
            "contact_id": 1,
            "type": "SMS",
            "content": "Original message",
            "direction": "OUTBOUND"
        })
>       message_id = create_response.json()["message_id"]
E       KeyError: 'message_id'

tests/routers/test_messages_router.py:51: KeyError
_____________________________ test_delete_message ______________________________

    def test_delete_message():
        # First, create a message
        create_response = client.post("/messages/", json={
            "contact_id": 1,
            "type": "SMS",
            "content": "Message to delete",
            "direction": "OUTBOUND"
        })
>       message_id = create_response.json()["message_id"]
E       KeyError: 'message_id'

tests/routers/test_messages_router.py:71: KeyError
______________________________ test_send_message _______________________________

    def test_send_message():
        response = client.post("/messages/send", json={
            "contact_id": 1,
            "type": "SMS",
            "content": "Test message to send",
            "direction": "OUTBOUND"
        })
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/routers/test_messages_router.py:90: AssertionError
_________________________ test_get_scheduled_messages __________________________

    def test_get_scheduled_messages():
        response = client.get("/messages/schedule")
>       assert response.status_code == 501
E       assert 422 == 501
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/routers/test_messages_router.py:97: AssertionError
___________________________ test_blast_update_schema ___________________________

    def test_blast_update_schema():
        valid_data = {
            "name": "Updated Blast",
            "content": "Updated content",
            "status": InteractionStatus.SENT
        }
>       blast = BlastUpdate(**valid_data)
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for BlastUpdate
E       type
E         Field required [type=missing, input_value={'name': 'Updated Blast',...ionStatus.SENT: 'sent'>}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.9/v/missing

tests/schemas/test_schems.py:102: ValidationError
=============================== warnings summary ===============================
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/pydantic/_internal/_config.py:291
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/pydantic/_internal/_config.py:291
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/pydantic/_internal/_config.py:291
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/pydantic/_internal/_config.py:291
../../../../.pyenv/versions/3.10.9/lib/python3.10/site-packages/pydantic/_internal/_config.py:291
  /Users/joseluissirven/.pyenv/versions/3.10.9/lib/python3.10/site-packages/pydantic/_internal/_config.py:291: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/routers/test_blast_routers.py::test_create_blast - assert 422 ==...
FAILED tests/routers/test_blast_routers.py::test_read_blast - KeyError: 'blas...
FAILED tests/routers/test_blast_routers.py::test_read_non_existent_blast - At...
FAILED tests/routers/test_blast_routers.py::test_read_blasts - AttributeError...
FAILED tests/routers/test_blast_routers.py::test_update_blast - KeyError: 'bl...
FAILED tests/routers/test_blast_routers.py::test_update_non_existent_blast - ...
FAILED tests/routers/test_blast_routers.py::test_send_blast - KeyError: 'blas...
FAILED tests/routers/test_blast_routers.py::test_send_non_existent_blast - At...
FAILED tests/routers/test_contacts_router.py::test_create_contact - sqlalchem...
FAILED tests/routers/test_contacts_router.py::test_read_contacts - AttributeE...
FAILED tests/routers/test_contacts_router.py::test_read_contact - sqlalchemy....
FAILED tests/routers/test_contacts_router.py::test_update_contact - sqlalchem...
FAILED tests/routers/test_contacts_router.py::test_delete_contact - sqlalchem...
FAILED tests/routers/test_messages_router.py::test_create_message - assert 42...
FAILED tests/routers/test_messages_router.py::test_read_messages - AttributeE...
FAILED tests/routers/test_messages_router.py::test_read_message - KeyError: '...
FAILED tests/routers/test_messages_router.py::test_update_message - KeyError:...
FAILED tests/routers/test_messages_router.py::test_delete_message - KeyError:...
FAILED tests/routers/test_messages_router.py::test_send_message - assert 422 ...
FAILED tests/routers/test_messages_router.py::test_get_scheduled_messages - a...
FAILED tests/schemas/test_schems.py::test_blast_update_schema - pydantic_core...
ERROR tests/models/test_models.py::test_contact_model - sqlalchemy.exc.Compil...
ERROR tests/models/test_models.py::test_interaction_model - sqlalchemy.exc.Co...
ERROR tests/models/test_models.py::test_message_model - sqlalchemy.exc.Compil...
ERROR tests/models/test_models.py::test_blast_model - sqlalchemy.exc.CompileE...
ERROR tests/models/test_models.py::test_blast_recipient_model - sqlalchemy.ex...
ERROR tests/queries/test_blast_queries.py::test_send_blast - sqlalchemy.exc.C...
ERROR tests/queries/test_blast_queries.py::test_get_blasts - sqlalchemy.exc.C...
ERROR tests/queries/test_blast_queries.py::test_get_blast - sqlalchemy.exc.Co...
ERROR tests/queries/test_blast_queries.py::test_update_blast - sqlalchemy.exc...
ERROR tests/queries/test_blast_queries.py::test_delete_blast - sqlalchemy.exc...
ERROR tests/queries/test_contacts_queries.py::test_create_contact - sqlalchem...
ERROR tests/queries/test_contacts_queries.py::test_get_contacts - sqlalchemy....
ERROR tests/queries/test_contacts_queries.py::test_get_contact - sqlalchemy.e...
ERROR tests/queries/test_contacts_queries.py::test_update_contact - sqlalchem...
ERROR tests/queries/test_contacts_queries.py::test_delete_contact - sqlalchem...
ERROR tests/queries/test_interactions_queries.py::test_create_interaction - s...
ERROR tests/queries/test_interactions_queries.py::test_get_interactions_by_contact
ERROR tests/queries/test_messages_queries.py::test_create_message - sqlalchem...
ERROR tests/queries/test_messages_queries.py::test_get_messages - sqlalchemy....
ERROR tests/queries/test_messages_queries.py::test_get_message - sqlalchemy.e...
ERROR tests/queries/test_messages_queries.py::test_update_message - sqlalchem...
ERROR tests/queries/test_messages_queries.py::test_delete_message - sqlalchem...
ERROR tests/routers/test_interactions_routers.py::test_send_message - sqlalch...
ERROR tests/routers/test_interactions_routers.py::test_send_message_non_existent_contact
============= 21 failed, 8 passed, 5 warnings, 24 errors in 10.85s =============
